# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'secondpage.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import shutil
from PyQt5 import QtCore, QtGui, QtWidgets

class UiSecondWindow(object):
    def __init__(self, folder_to_process, copy_operation, subfolder_list):
        self.allowed_extentions = ['jpg', 'png', 'jpeg']
        self.parent = None
        self.current_page = None
        self.current_image = 0
        self.folder_to_process = folder_to_process
        self.image_list = self.get_imagelist()
        self.copy_operation = copy_operation
        self.subfolder_list = subfolder_list
        self.folder_buttons = {}
        self.parent_subfolder_path = os.path.join(os.path.dirname(
            self.folder_to_process), f'{self.folder_to_process.split("/")[-1]}_sorted')

    def is_dir(self, folder_name):
        folder_path = os.path.join(self.parent_subfolder_path, folder_name)
        os.makedirs(folder_path, exist_ok=True)

    def get_imagelist(self):
        imagelist = os.listdir(self.folder_to_process)
        imagelist = [entry for entry in imagelist if entry.split(
            '.')[-1] in self.allowed_extentions]
        return imagelist

    def next_image(self):
        if len(self.image_list) != 0:
            if self.current_image != len(self.image_list)-1:
                self.current_image += 1
            else:
                self.current_image = 0

            self.image_label.setPixmap(QtGui.QPixmap(os.path.join(
                self.folder_to_process, self.image_list[self.current_image])))

    def prev_image(self):
        if len(self.image_list) != 0:
            if self.current_image > 0:
                self.current_image -= 1
            else:
                self.current_image = len(self.image_list)-1

            self.image_label.setPixmap(QtGui.QPixmap(os.path.join(
                self.folder_to_process, self.image_list[self.current_image])))

    def crop_image(self):
        print('Crop Pressed')

    def sort(self, itr):
        if self.copy_operation:
            # copy
            shutil.copy(os.path.join(self.folder_to_process, self.image_list[self.current_image]), os.path.join(
                self.parent_subfolder_path, self.subfolder_list[itr], self.image_list[self.current_image]))
        else:
            # cut
            shutil.move(os.path.join(self.folder_to_process, self.image_list[self.current_image]), os.path.join(
                self.parent_subfolder_path, self.subfolder_list[itr], self.image_list[self.current_image]))

        del self.image_list[self.current_image]
        self.current_image = 0

        if len(self.image_list) != 0:
            self.image_label.setPixmap(QtGui.QPixmap(os.path.join(
                self.folder_to_process, self.image_list[self.current_image])))
        else:
            # go to first page
            self.done()

    def add_buttons(self):
        start_y = 50
        for itr, folder_name in enumerate(self.subfolder_list):
            self.folder_buttons[itr] = QtWidgets.QPushButton(
                self.centralwidget)
            self.folder_buttons[itr].setGeometry(
                QtCore.QRect(50, start_y, 88, 24))
            self.folder_buttons[itr].setObjectName(f"{folder_name}_button")
            start_y += 50
            self.is_dir(folder_name)

        for itr, folder_button in enumerate(self.folder_buttons.values()):
            folder_button.clicked.connect(lambda _, itr=itr: self.sort(itr))

    def setupUi(self, secondpage, parent):
        self.parent = parent
        self.current_page = secondpage
        self.current_page.setObjectName("MainWindow")
        self.current_page.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(self.current_page)
        self.centralwidget.setObjectName("centralwidget")
        self.image_label = QtWidgets.QLabel(self.centralwidget)
        self.image_label.setGeometry(QtCore.QRect(230, 10, 561, 451))
        self.image_label.setText("")
        self.image_label.setScaledContents(True)
        self.image_label.setObjectName("image_label")
        if len(self.image_list) != 0:
            self.image_label.setPixmap(QtGui.QPixmap(os.path.join(
                self.folder_to_process, self.image_list[self.current_image])))
        self.prev_button = QtWidgets.QPushButton(self.centralwidget)
        self.prev_button.setGeometry(QtCore.QRect(310, 510, 88, 24))
        self.prev_button.setObjectName("prev_button")
        self.next_button = QtWidgets.QPushButton(self.centralwidget)
        self.next_button.setGeometry(QtCore.QRect(570, 510, 88, 24))
        self.next_button.setObjectName("next_button")
        self.crop_button = QtWidgets.QPushButton(self.centralwidget)
        self.crop_button.setGeometry(QtCore.QRect(440, 510, 88, 24))
        self.crop_button.setObjectName("crop_button")
        self.current_page.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(self.current_page)
        self.statusbar.setObjectName("statusbar")
        self.current_page.setStatusBar(self.statusbar)
        
        self.back_button = QtWidgets.QPushButton(self.centralwidget)
        self.back_button.setGeometry(QtCore.QRect(700, 510, 88, 24))
        self.back_button.setObjectName("back_button")
        
        self.add_buttons()
        self.retranslateUi(self.current_page)
        QtCore.QMetaObject.connectSlotsByName(self.current_page)

        self.prev_button.clicked.connect(self.prev_image)
        self.next_button.clicked.connect(self.next_image)
        self.crop_button.clicked.connect(self.crop_image)
        self.back_button.clicked.connect(self.done)
        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Image Sorter"))
        self.prev_button.setText(_translate("MainWindow", "Prev"))
        self.prev_button.setShortcut(_translate("MainWindow", "Left"))
        self.next_button.setText(_translate("MainWindow", "Next"))
        self.next_button.setShortcut(_translate("MainWindow", "Right"))
        self.crop_button.setText(_translate("MainWindow", "Crop"))
        self.crop_button.setShortcut(_translate("MainWindow", "Ctrl+C"))
        self.back_button.setText(_translate("MainWindow", "Back"))

        for itr, folder_name in enumerate(self.subfolder_list):
            self.folder_buttons[itr].setText(
                _translate("MainWindow", folder_name))
            self.folder_buttons[itr].setShortcut(
                _translate("MainWindow", f'{itr+1}'))

    def done(self):
        self.parent.show()
        self.current_page.close()
