# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'firstpage.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import sys
import shutil
from PIL import Image
from PyQt5 import QtCore, QtGui, QtWidgets


class UiFirstWindow(object):
    def __init__(self):
        self.folder_to_process = None
        self.copy_operation = None
        self.subfolder_list = []

    def reset(self):
        self.copy_radio.setAutoExclusive(False)
        self.cut_radio.setAutoExclusive(False)
        self.copy_radio.setChecked(False)
        self.cut_radio.setChecked(False)
        self.copy_radio.setAutoExclusive(True)
        self.cut_radio.setAutoExclusive(True)
        self.folder_list.clear()
        self.folder_to_process = None
        self.copy_operation = None
        self.subfolder_list = []

    def display_error_message(self, title_message, info_message):
        error_message = QtWidgets.QMessageBox()
        error_message.setIcon(QtWidgets.QMessageBox.Critical)
        error_message.setText(title_message)
        error_message.setInformativeText(info_message)
        error_message.setWindowTitle("Error!")
        _ = error_message.exec_()

    def set_folder(self):
        self.folder_to_process = QtWidgets.QFileDialog.getExistingDirectory()

    def set_operation(self, button):
        if button.objectName() == 'copy_radio' and button.isChecked():
            self.copy_operation = True
        if button.objectName() == 'cut_radio' and button.isChecked():
            self.copy_operation = False

    def does_not_exist(self, folder_name):
        for itr in range(self.folder_list.count()):
            if folder_name == self.folder_list.item(itr).text():
                return False
        return True

    def add_folder_to_list(self, folder_name):
        if self.does_not_exist(folder_name):
            if self.subfolder_name.text():
                folder_entry = QtWidgets.QListWidgetItem(folder_name)
                self.folder_list.addItem(folder_entry)
                self.subfolder_list.append(folder_name)
            else:
                self.display_error_message('Error:',
                                           "Folder name cannot be empty!")
        else:
            self.display_error_message('Error:',
                                       "Duplicate entry: Folder already in the list!")

        self.subfolder_name.setText("")

    def next_window(self, firstpage):
        if self.folder_to_process is not None and self.copy_operation is not None and len(self.subfolder_list) >= 2:
            self.second_window = QtWidgets.QMainWindow()
            self.ui = UiSecondWindow(
                self.folder_to_process, self.copy_operation, self.subfolder_list)
            self.ui.setupUi(self.second_window, firstpage)
            self.second_window.showMaximized()
            firstpage.hide()
            self.reset()
        else:
            self.display_error_message('Missing Condition:',
                                       "Make sure:\n- Folder to process is selected.\n- Copy/Cut operation is selected.\n- There are atleast 2 subfolders added.")

    def setupUi(self, first_page):
        first_page.setObjectName("first_page")
        first_page.resize(1920, 1080)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            first_page.sizePolicy().hasHeightForWidth())
        first_page.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Serif")
        font.setPointSize(12)
        first_page.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.join("assets", "icon.png")),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        first_page.setWindowIcon(icon)
        first_page.setLayoutDirection(QtCore.Qt.LeftToRight)
        first_page.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(first_page)
        self.centralwidget.setObjectName("centralwidget")
        self.formLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.formLayoutWidget.setGeometry(QtCore.QRect(560, 180, 781, 631))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.master_layout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.master_layout.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.master_layout.setFieldGrowthPolicy(
            QtWidgets.QFormLayout.ExpandingFieldsGrow)
        self.master_layout.setRowWrapPolicy(QtWidgets.QFormLayout.DontWrapRows)
        self.master_layout.setLabelAlignment(QtCore.Qt.AlignCenter)
        self.master_layout.setFormAlignment(QtCore.Qt.AlignCenter)
        self.master_layout.setContentsMargins(0, 0, 0, 0)
        self.master_layout.setObjectName("master_layout")
        self.choose_opr_layout = QtWidgets.QGridLayout()
        self.choose_opr_layout.setObjectName("choose_opr_layout")
        self.choose_opr_label = QtWidgets.QLabel(self.formLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.choose_opr_label.sizePolicy().hasHeightForWidth())
        self.choose_opr_label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.choose_opr_label.setFont(font)
        self.choose_opr_label.setObjectName("choose_opr_label")
        self.choose_opr_layout.addWidget(self.choose_opr_label, 0, 0, 1, 1)
        self.copy_radio = QtWidgets.QRadioButton(self.formLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.copy_radio.sizePolicy().hasHeightForWidth())
        self.copy_radio.setSizePolicy(sizePolicy)
        self.copy_radio.setObjectName("copy_radio")
        self.choose_opr_layout.addWidget(self.copy_radio, 1, 0, 1, 1)
        self.cut_radio = QtWidgets.QRadioButton(self.formLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.cut_radio.sizePolicy().hasHeightForWidth())
        self.cut_radio.setSizePolicy(sizePolicy)
        self.cut_radio.setObjectName("cut_radio")
        self.choose_opr_layout.addWidget(self.cut_radio, 1, 2, 1, 1)
        self.master_layout.setLayout(
            2, QtWidgets.QFormLayout.FieldRole, self.choose_opr_layout)
        spacerItem = QtWidgets.QSpacerItem(
            20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.master_layout.setItem(
            3, QtWidgets.QFormLayout.FieldRole, spacerItem)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSizeConstraint(
            QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.subfolder_name = QtWidgets.QLineEdit(self.formLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.subfolder_name.sizePolicy().hasHeightForWidth())
        self.subfolder_name.setSizePolicy(sizePolicy)
        self.subfolder_name.setObjectName("subfolder_name")
        self.horizontalLayout.addWidget(self.subfolder_name)
        self.add_folder = QtWidgets.QPushButton(self.formLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.add_folder.sizePolicy().hasHeightForWidth())
        self.add_folder.setSizePolicy(sizePolicy)
        self.add_folder.setObjectName("add_folder")
        self.horizontalLayout.addWidget(self.add_folder)
        self.horizontalLayout.setStretch(0, 10)
        self.master_layout.setLayout(
            4, QtWidgets.QFormLayout.FieldRole, self.horizontalLayout)
        self.folder_list = QtWidgets.QListWidget(self.formLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.folder_list.sizePolicy().hasHeightForWidth())
        self.folder_list.setSizePolicy(sizePolicy)
        self.folder_list.setObjectName("folder_list")
        self.master_layout.setWidget(
            5, QtWidgets.QFormLayout.FieldRole, self.folder_list)
        spacerItem1 = QtWidgets.QSpacerItem(
            20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.master_layout.setItem(
            6, QtWidgets.QFormLayout.FieldRole, spacerItem1)
        self.proceed = QtWidgets.QPushButton(self.formLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.proceed.sizePolicy().hasHeightForWidth())
        self.proceed.setSizePolicy(sizePolicy)
        self.proceed.setObjectName("proceed")
        self.master_layout.setWidget(
            7, QtWidgets.QFormLayout.FieldRole, self.proceed)
        self.open_folder = QtWidgets.QPushButton(self.formLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.open_folder.sizePolicy().hasHeightForWidth())
        self.open_folder.setSizePolicy(sizePolicy)
        self.open_folder.setObjectName("open_folder")
        self.master_layout.setWidget(
            0, QtWidgets.QFormLayout.FieldRole, self.open_folder)
        spacerItem2 = QtWidgets.QSpacerItem(
            20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.master_layout.setItem(
            1, QtWidgets.QFormLayout.FieldRole, spacerItem2)
        first_page.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(first_page)
        self.statusbar.setObjectName("statusbar")
        first_page.setStatusBar(self.statusbar)

        self.retranslateUi(first_page)
        QtCore.QMetaObject.connectSlotsByName(first_page)

        self.open_folder.clicked.connect(self.set_folder)
        self.copy_radio.toggled.connect(
            lambda: self.set_operation(self.copy_radio))
        self.cut_radio.toggled.connect(
            lambda: self.set_operation(self.cut_radio))
        self.subfolder_name.returnPressed.connect(
            lambda: self.add_folder_to_list(self.subfolder_name.text()))
        self.add_folder.clicked.connect(
            lambda: self.add_folder_to_list(self.subfolder_name.text()))
        self.proceed.clicked.connect(lambda: self.next_window(first_page))

    def retranslateUi(self, first_page):
        _translate = QtCore.QCoreApplication.translate
        first_page.setWindowTitle(_translate("first_page", "Image Sorter"))
        self.choose_opr_label.setText(
            _translate("first_page", "Choose Operation:"))
        self.copy_radio.setText(_translate("first_page", "Cop&y"))
        self.cut_radio.setText(_translate("first_page", "C&ut"))
        self.subfolder_name.setPlaceholderText(
            _translate("first_page", "Enter Subfolder Name"))
        self.add_folder.setText(_translate("first_page", "Add Folder"))
        self.proceed.setText(_translate("first_page", "Proceed"))
        self.open_folder.setText(_translate("first_page", "Open Folder"))
        self.open_folder.setShortcut(_translate("first_page", "Ctrl+O"))


class ImageCanvas(QtWidgets.QLabel):
    def __init__(self, parent_widget):
        super(ImageCanvas, self).__init__(parent_widget)
        self.scale = None
        self.xmin = None
        self.ymin = None
        self.xmax = None
        self.ymax = None
        self.is_cropped = False
        self.finalQPoint = None

    def mousePressEvent(self, eventQMouseEvent):
        self.originQPoint = eventQMouseEvent.pos()
        self.currentQRubberBand = QtWidgets.QRubberBand(
            QtWidgets.QRubberBand.Rectangle, self)
        self.currentQRubberBand.setGeometry(
            QtCore.QRect(self.originQPoint, QtCore.QSize()))
        self.currentQRubberBand.show()

    def mouseMoveEvent(self, eventQMouseEvent):
        self.is_cropped = True
        self.finalQPoint = eventQMouseEvent.pos()
        self.currentQRubberBand.setGeometry(QtCore.QRect(
            self.originQPoint, self.finalQPoint).normalized())

    def mouseReleaseEvent(self, eventQMouseEvent):
        self.currentQRubberBand.hide()
        self.currentQRubberBand.deleteLater()
        if self.is_cropped:
            self.xmin = int(self.originQPoint.x() * self.scale)
            self.ymin = int(self.originQPoint.y() * self.scale)
            self.xmax = int(self.finalQPoint.x() * self.scale)
            self.ymax = int(self.finalQPoint.y() * self.scale)

    def get_size_params(self, image_path):
        image = Image.open(image_path)
        width, height = image.size
        cal_width = (width/height)*850
        self.scale = height/850
        return (1160-(cal_width/2)), cal_width

    def clear_vars(self):
        self.xmin = None
        self.ymin = None
        self.right = None
        self.ymax = None
        self.is_cropped = False


class UiSecondWindow(object):
    def __init__(self, folder_to_process, copy_operation, subfolder_list):
        self.allowed_extentions = ['jpg', 'png', 'jpeg']
        self.parent = None
        self.current_page = None
        self.current_image = 0
        self.folder_to_process = folder_to_process
        self.image_list = self.get_imagelist()
        self.copy_operation = copy_operation
        self.subfolder_list = subfolder_list
        self.folder_buttons = {}
        self.parent_subfolder_path = os.path.join(os.path.dirname(
            self.folder_to_process), f'{self.folder_to_process.split("/")[-1]}_sorted')

    def is_dir(self, folder_name):
        folder_path = os.path.join(self.parent_subfolder_path, folder_name)
        os.makedirs(folder_path, exist_ok=True)

    def get_imagelist(self):
        imagelist = os.listdir(self.folder_to_process)
        imagelist = [entry for entry in imagelist if entry.split(
            '.')[-1] in self.allowed_extentions]
        return imagelist

    def next_image(self):
        if len(self.image_list) != 0:
            if self.current_image != len(self.image_list)-1:
                self.current_image += 1
            else:
                self.current_image = 0

            self.image_label.clear_vars()
            image_path = os.path.join(
                self.folder_to_process, self.image_list[self.current_image])
            start_x, width = self.image_label.get_size_params(image_path)
            self.image_label.setGeometry(QtCore.QRect(start_x, 10, width, 850))
            self.image_label.setPixmap(QtGui.QPixmap(image_path).scaled(
                self.image_label.size(), QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))

    def prev_image(self):
        if len(self.image_list) != 0:
            if self.current_image > 0:
                self.current_image -= 1
            else:
                self.current_image = len(self.image_list)-1

            self.image_label.clear_vars()
            image_path = os.path.join(
                self.folder_to_process, self.image_list[self.current_image])
            start_x, width = self.image_label.get_size_params(image_path)
            self.image_label.setGeometry(QtCore.QRect(start_x, 10, width, 850))
            self.image_label.setPixmap(QtGui.QPixmap(image_path).scaled(
                self.image_label.size(), QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))

    def sort(self, itr):
        if self.copy_operation:
            # copy
            if self.image_label.is_cropped:
                input_image = Image.open(os.path.join(
                    self.folder_to_process, self.image_list[self.current_image]))
                input_image.crop((self.image_label.xmin, self.image_label.ymin, self.image_label.xmax, self.image_label.ymax)).save(os.path.join(
                    self.parent_subfolder_path, self.subfolder_list[itr], self.image_list[self.current_image]))
            else:
                shutil.copy(os.path.join(self.folder_to_process, self.image_list[self.current_image]), os.path.join(
                    self.parent_subfolder_path, self.subfolder_list[itr], self.image_list[self.current_image]))
        else:
            # cut
            shutil.move(os.path.join(self.folder_to_process, self.image_list[self.current_image]), os.path.join(
                self.parent_subfolder_path, self.subfolder_list[itr], self.image_list[self.current_image]))

            if self.image_label.is_cropped:
                input_image = Image.open(os.path.join(
                    self.parent_subfolder_path, self.subfolder_list[itr], self.image_list[self.current_image]))
                input_image.crop((self.image_label.xmin, self.image_label.ymin, self.image_label.xmax, self.image_label.ymax)).save(os.path.join(
                    self.parent_subfolder_path, self.subfolder_list[itr], self.image_list[self.current_image]))

        del self.image_list[self.current_image]
        self.current_image = 0

        if len(self.image_list) != 0:
            self.image_label.clear_vars()
            image_path = os.path.join(
                self.folder_to_process, self.image_list[self.current_image])
            start_x, width = self.image_label.get_size_params(image_path)
            self.image_label.setGeometry(QtCore.QRect(start_x, 10, width, 850))
            self.image_label.setPixmap(QtGui.QPixmap(image_path).scaled(
                self.image_label.size(), QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
        else:
            # go to first page
            self.done()

    def add_buttons(self):
        start_y = 50
        for itr, folder_name in enumerate(self.subfolder_list):
            self.folder_buttons[itr] = QtWidgets.QPushButton(
                self.centralwidget)
            self.folder_buttons[itr].setGeometry(
                QtCore.QRect(50, start_y, 135, 45))
            self.folder_buttons[itr].setObjectName(f"{folder_name}_button")
            start_y += 90
            self.is_dir(folder_name)

        for itr, folder_button in enumerate(self.folder_buttons.values()):
            folder_button.clicked.connect(lambda _, itr=itr: self.sort(itr))

    def done(self):
        self.parent.show()
        self.current_page.close()

    def setupUi(self, second_page, parent):
        self.parent = parent
        self.current_page = second_page
        self.current_page.setObjectName("second_page")
        self.current_page.resize(1920, 1080)
        font = QtGui.QFont()
        font.setFamily("Serif")
        font.setPointSize(12)
        self.current_page.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(os.path.join("assets", "icon.png")),
                       QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.current_page.setWindowIcon(icon)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(
            self.current_page.sizePolicy().hasHeightForWidth())
        self.current_page.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(self.current_page)
        self.centralwidget.setObjectName("centralwidget")

        if len(self.image_list) != 0:
            self.image_label = ImageCanvas(self.centralwidget)
            sizePolicy = QtWidgets.QSizePolicy(
                QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
            sizePolicy.setHorizontalStretch(0)
            sizePolicy.setVerticalStretch(0)
            sizePolicy.setHeightForWidth(
                self.image_label.sizePolicy().hasHeightForWidth())
            self.image_label.setSizePolicy(sizePolicy)
            self.image_label.setFrameShape(QtWidgets.QFrame.Box)
            self.image_label.setFrameShadow(QtWidgets.QFrame.Raised)
            self.image_label.setLineWidth(2)
            self.image_label.setText("")
            self.image_label.setAlignment(QtCore.Qt.AlignCenter)
            self.image_label.setObjectName("image_label")
            image_path = os.path.join(
                self.folder_to_process, self.image_list[self.current_image])
            start_x, width = self.image_label.get_size_params(image_path)
            self.image_label.setGeometry(QtCore.QRect(start_x, 10, width, 850))
            self.image_label.setPixmap(QtGui.QPixmap(image_path).scaled(
                self.image_label.size(), QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation))
            self.image_label.setCursor(QtGui.QCursor(QtCore.Qt.CrossCursor))
        else:
            self.image_label = QtWidgets.QLabel(self.centralwidget)
            self.image_label.setGeometry(QtCore.QRect(440, 10, 1440, 850))
            sizePolicy = QtWidgets.QSizePolicy(
                QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
            sizePolicy.setHorizontalStretch(0)
            sizePolicy.setVerticalStretch(0)
            sizePolicy.setHeightForWidth(
                self.image_label.sizePolicy().hasHeightForWidth())
            self.image_label.setSizePolicy(sizePolicy)
            self.image_label.setFrameShape(QtWidgets.QFrame.Box)
            self.image_label.setFrameShadow(QtWidgets.QFrame.Raised)
            self.image_label.setLineWidth(2)
            self.image_label.setText("")
            self.image_label.setAlignment(QtCore.Qt.AlignCenter)
            self.image_label.setObjectName("image_label")
            self.image_label.setText("No Images Found!!")

        self.prev_button = QtWidgets.QPushButton(self.centralwidget)
        self.prev_button.setGeometry(QtCore.QRect(990, 880, 135, 45))
        self.prev_button.setObjectName("prev_button")
        self.next_button = QtWidgets.QPushButton(self.centralwidget)
        self.next_button.setGeometry(QtCore.QRect(1180, 880, 135, 45))
        self.next_button.setObjectName("next_button")
        self.back_button = QtWidgets.QPushButton(self.centralwidget)
        self.back_button.setGeometry(QtCore.QRect(50, 880, 135, 45))
        self.back_button.setObjectName("back_button")
        self.current_page.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(self.current_page)
        self.statusbar.setObjectName("statusbar")
        self.current_page.setStatusBar(self.statusbar)

        self.add_buttons()
        self.retranslateUi(self.current_page)
        QtCore.QMetaObject.connectSlotsByName(self.current_page)

        self.prev_button.clicked.connect(self.prev_image)
        self.next_button.clicked.connect(self.next_image)
        self.back_button.clicked.connect(self.done)

    def retranslateUi(self, second_page):
        _translate = QtCore.QCoreApplication.translate
        second_page.setWindowTitle(_translate("second_page", "Image Sorter"))
        self.prev_button.setText(_translate("second_page", "Prev"))
        self.prev_button.setShortcut(_translate("second_page", "Left"))
        self.next_button.setText(_translate("second_page", "Next"))
        self.next_button.setShortcut(_translate("second_page", "Right"))
        self.back_button.setText(_translate("second_page", "Back"))

        for itr, folder_name in enumerate(self.subfolder_list):
            self.folder_buttons[itr].setText(
                _translate("MainWindow", folder_name))
            self.folder_buttons[itr].setShortcut(
                _translate("MainWindow", f'{itr+1}'))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    first_page = QtWidgets.QMainWindow()
    ui = UiFirstWindow()
    ui.setupUi(first_page)
    first_page.show()
    sys.exit(app.exec_())
